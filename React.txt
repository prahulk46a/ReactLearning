// React prerequisites 
- HTML
- CSS
- Tailwind css
- JS=>
	- ES6
	- DOM
	- How JS engine works
	- Modules
	- Destructuring- rest& spread
	- Classes
	- Events, Timers
	- Objects, Arrays, String
	- map filter reduce

// History of React=> 
- Created by Facebook(Jordan Walke) in 2011
- Library
- Follows component based based. 
- Supports=> JavaScript,Typescript
- 2011-messenger implementation,2012 -Instagram, 2013- Open source


// React=> 
- JavaScript library which is used to create single page application.
- JSAP CSS animation library

//React features and characteristics=>
- It follows component based architecture
- It is declarative in nature(already declared). ex. we dont need to write/use dom.No need to write some logics. Cause already declared.React provides inbuilt hooks for different functionalities We just have to use them.
- Write once use anywhere. You can create functionality that are used multiple times. example. Create Button component once and use anywhere in application 
- (Imperative=> need to write logic)

// Library vs Framework
   	- Library => - Collection of reusable Block of code
		     - Light Weight
		     - Loosely typed.	
		     - Always particular functionality oriented
		     - Using Libraries we can create fast and scalable applications
		     - Easy to debug 
		     - Can install external libraries.
		   	
	- Framework=> - Collection of multiple libraries.
		      - Heavy Weight.
		      - Strictly typed compared with libraries
		      - Always multiple functionality oriented.
		      - Using Libraries we can crate applications but that maybe slower compared to libraries 
		      - Debugging is difficult task.	
		      - Can install external libraries.	


// Single page applications
- Application which doesn't required page reload to update content=> Single html file
- Faster than multipage application
- Ajax is hero of Single page application


// Ajax=> (Async JS and XML)=> 
- Ajax will send necessary requests to server so that bandwidth will be less hence request response cycle faster hence application will be faster 
- Ajax will load the content without reloading the page


// Package bundler=>
- Will bundle all the request into induvial bundles based on extensions 
- Package bundlers will help to reduce bandwidth
- If we are sending n no of request from frontend that multiple request are bundled into as minimum no request as possible based on extensions by package bundler
- Ex. Webpack, Rollup, Parcer 


// Installation
- Folder create 
- In that folder open cmd
- cmd command=> npm create vite
- Enter project name , package name(Default project name)
- Select framework
- Select language 
- Gives 3 command run one by one
- Default port => 5173

// Folder structure
- Node module=> All packages downloaded during react installation, needed for execution of react application ex. babel,eslint ,rollup, vite.js, react, react dom,   
- public=> Used to hold static assets in react similar to assets in src folder. Dont use mostly keep mostly in assets folder.
- src=> - Assets=> Static content stored in this folder mostly
		- 
- eslint.conflict.js=> It is the package which confirms syntax validation in building react application(analogous to java compiler)
- index.html=> Single html file. we do not add anything inside that.Inside that there is only single div with id root.
- package.json=>- It is like dashboard of entire react application where you get important limited info related to packages like version.^version => rangr upto cerain patches
				- devDependencies=> dependencies required only for development and not required after deployment.Majour dependencies like eslint,react,vite etc.
				- Script=> Inside package.jsom there is prop script this scripts are mapped with certain action.
						   for ex. in vite based project we use vite in create react app way we use npx so what this script will do,
						   it will get executed when added after npm run "scriptname" here dev to run project common script for all similar operations

- package-Lock.json=> Similar to like package.json. It will have exact version of dependencies download also that dependency is dependant on what that is present.
- vite.config.js=> Information about vite configuration.

// Code flow=>
Diffing algo=> Process to find different bet real dom and virtual dom
Reconciliation process=> Process of implementing the changes from virtual dom to real dom that are found during the diffing algo

// Vite- Organization which handles installation and organization of react project

- React fiber=> All changes in handle by react fiber it is analogous to js engine.
- What is Babel=> Babel is transpiler. It will convert the modern js(.JSX) code to browser understandable code(.js),this process is called transpilation.
- JSX=> Javascript xml => JSX is html look like js code.
- Transpilation occurs during the rendering

// Src=> 
- Each individuals reusable component is created inside your src folder as separate component
- main.jsx is only capable to communicate with your browser
- For main.jsx their is css file index.css
- Every components name should only Capital first

// Flow of React =>


// npm=> Node Package manager
- It is package manager which handles packages related to js framework and libraries
- Over 21 lakhs Packages
- In-order to download multiple packages => ex. npm install react babel react-dom.
- Node js will find package and downloads using npm cmds

//npm is node package manager but sometimes you want to directly execute some packages then npx(Node package executer) comes into picture

// Main.jsx=>
- Strict mode=> Checks js code double 
- Will contact mostly only with app.jsx

// createRoot(document.getElementById('root')).render(</App>)=> Analogous to div.append(app)
	- createRoot=>  - React creates a FiberRootNode that is linked to the DOM container (e.g., document.getElementById('root'))
					- This Fiber root serves as the entry point for all rendering work and keeps track of the state of the entire application.
					- <div id="root">//app</div> is entry point and all elements are then appended into this div
	
	- render(</App>)=> 	- Validate Input: React ensures the element (e.g., <App />) is a valid React element
					- The work is scheduled in a way that allows React to break it into chunks and prioritize tasks based on urgency
					- During ths render process diffing algo and transpilation happens
					- returned app </App> will be appended to div. 

- Styles applied to index.css  => will be applied to all as all component are in the end going to come at root div i.e


																 grandChild1
														child1<= grandChild2...
				returns main jsx				child jsx returned to ap
		Div-Root<= Main <= App+child1+child2...child n<= child2

														child n

Javascript logic Inside jsx component
- It is recommended to write into component but outside of that return statement
- jsx expressions=> Used to add js into html=> 
ex. let Footer=()=> {
		let a="Rahul";
    return (
      <div id="footer">
          My name is {a}
      </div>
    )
  } 
	//Old way to create=> https://react.dev/reference/react/createElement
	React.createElement(parent-tag,attributes,child-tag/content)=> React.createElement('div',{id:"myDiv",style:""},'<p>')
  	
	// JSX=> 
  - JavaScript and xml
  - Html look like structure but not html
  - While writing jsx we have to follow some rules=>
		- Rule1: Compulsory you have to return jsx cause in the end all is going to add into main html
		- Rule2: If you want to return single element send directly but if you want to return multiple elements then  you should wrap all into one parent element and send that one only.
		- Rule3: Each and every tag must be closed.
		- Rule4: We cannot use attributes like "class" "for", while writing the jsx instead of that we have to use "classname" and "htmlfor"
		- Rule5: React Fragments are empty angular braces.Avoiding creating extra nodes, it will improve performance.We cannot use key in empty angular braces butt we can use in <React.fragment> or <Fragment>. 
				Fragment is inside React library so need to import every time.
		- Rule6: JSX Expressions=> We can directly use strings no need of $ using {example}.
					Rules for JSX Expressions=>
						- We should not write console statement inside expressions. 
						- We Cannot write conditional statements in jsx expressions except ternary operators and short circuits.
						  Short circuit=> A && B => If first statement is true then only second statement will be checked.		 
										  A || B => If first statement is true then will not check next expression
						- We cannot use all looping statements in expression we can only use higher order functions which returns as we want to return changes on UI
		- Convention: return Statement should be on same line for multiple lines we prefer to use () 
		- In JSX expression we should not write object, array, null, undefined, boolean,BigInt.=> Strings and number only

States and State management => Redux is used to managing state

//Types of components- 
	- Function Based components

-a Class Based components(CBC)
	- Stateful components=> It has its own state it can be obj or null.
	- CBC is one of the traditional way of creating component in react
	- CBC will use class to create component

	Class Based Components (CBC)
	1. Will use classes for creating components.
	2. Extends Component from react
	3. Has constructor and super call statement. 
	4. Must use render method.Inside that we return component.It will return and directly changes occurs in main 
	5. Stateful component=> It has inbuilt state and to handle this state we have setState method.
	6. We cannot use hooks in class based components.
	7. We have inbuilt life cycle methods in CBC. Ex constructor, render, getDerivedStateFromProps(), componentDidMount
	
 
	Function Based components (FBC)  //Shortcut=> rafce => will give boilerplate
	1. Will use functions to creating components.
	2. Does not extend Component.
	3. Does not have constructor and  super call statement.
	4. Does not need render method.It will return jsx to caller or parent element.
	5. FBC are stateless component means that it will not have its own state and setState method.
	6. If we want to have state in function based component we have to use some extra hooks for ex. useState hook
	7. FBC does not have any inbuilt methods for managing life cycles so to achieve lifecycle method we have to use hook called as useEffect.

// Hot Module Replace=> 
	- One of the most useful feature offered by package bundlers.
	- It allows all kind of modules to be updated at runtime without need of full refresh
	- Not Intended to use in production used only in dev phase.
	- Ex. In html when we change any heading the data entered into input tag will vanished but in react if we update heading input fields data will remain as it is.


// Hooks
- This are inbuilt function/methods 
- Hooks names starts with use ex. useState, useEffect, useContext, useCallback, useReducer ,useMemo.
- We can create any function and will name it use(XYZ) such functions can be treated as custom hooks.Ex. useAdd

1. useState =>
- Array of 2
- Destructure to access
- First is state and second is func setState 
- Pass value in parameter
- when you change state your entire component will get loaded by Default means every line will gel executed again
- present into react library so need to import every time when we want to use.
- If you want recheck entire component then useState is used. when cart is changed price associated should also changed using static variables this is not possible
- This is asynchronous in nature
- States should not be set in global as it get read once more time and it will again store state it will go infinite



2. useEffect =>
- Higher order component syntax=> (()=>{},[dependencies array])
- Without dependency array it act as normal block only.
- Whenever a change is occurred in any of dependency passed in dependency array then that useEffect will get called.
- You can pass multiple dependencies in single use effect and on change of any single dependency useEffect wil get called
- It will execute at the end of mounting phase.
- If we pass any dependencies into dependency array useEffects call back func will get called  only when there is change into any dependency.
  This useEffect call back function wil get called every time then change in  state of dependency value. 
- It replaces the classic React functions componentDidMount , componentDidUpdate , and componentWillUnmount with a shorter and simpler syntax.
- Runs after rendering when dependencies change.
- Common Use Cases	- Fetching data  - Setting up subscriptions  - Manipulating the DOM
					- Adding event listeners	


3. useReducer => 
- Use reducer hook is the alternative for useState hook for managing state in custom way.   
- It helps to manage complex states and logic better than useState hook
- UseReducer hook with context api is the most commonly used pattern in react applications
- Syntax=> const[state,dispatchFunc]=useReducer(reducer,initialState);
			State=> Hold the value passed to initial state variable
			dispatchFunc=> Dispatch is the function which is stored in reference called reducer.it is used to call whenever needed
			reducer=> - function which accepts 2 arg  that is current state and action, this action is argument passed to dispatch call.
					- The action can be any string, number, or any data type but most commonly it will be obj which can have type and value prop.
					- In your reducer function usually we write switch case  and in that switch case will be action.type. and based on that case(action.type)we can return updated state.
			initialState=> State that is assigned at first

ex.=> <button onClick=(()=>{dispatch({type:"add",val:"10"})})>   reducer=(state,action)=>{switch "action" case "action.type" }



4. useMemo =>
- What it will do=> Whenever there is any time taking activity that affects entire application unnecessarily 
- ex.If there is 2 state one has time taking code and other is small time taking code whenever any state change occurs it affects entire application to avoid this we will render time taking activity only if time taking state changes. 
- i.e react will remember(memoized) state and not recalculate again.
- Think of memoization as caching a value so that it does not need to be recalculated.
syntax=>	const memoizedValue = useMemo(() => {
				return computedValue;				//dependencies passed in array changes then only this block get executed
			}, [dependencies]);  		
https://chatgpt.com/share/678ac047-ba04-8013-b7c4-206230d8fe65 =>useMomo vs useEffect

const expensiveValue = useMemo(() => {
    console.log("Calculating...");
    return while(i<100000000000){count++}; 				// Simulate an expensive calculation
  }, [count]); 										// Recalculates only when `count` changes

- Recomputes value during rendering when dependencies change.
- Common Use cases - Memoizing derived data  -Optimizing expensive computations  -Reducing unnecessary re-renders


React.memo=>- Every single time state change unnecessarily child also get rerender even if no update is there this can be avoided using React.memo
			- React.memo is a higher-order component (HOC) in React that optimizes the rendering of functional components by preventing unnecessary re-renders. 
			- It works by memoizing the result of the component's last render and reusing it if the props haven't changed.

5. useCallback =>
- The React useCallback Hook returns a memoized callback function.
- Every time state changes component re-renders and function every time get created. Since funct which is passes as prop get change then child also get re-render.
- useCallback renders funct only when change in funct passed in dependency array occurs causing stop of unnecessarily rendering of child comp 
- This allows us to isolate resource intensive functions so that they will not automatically run on every render.
- The useCallback Hook only runs when one of its dependencies update .
- Recreates function during rendering when dependencies change.


6. useContext =>


7. useRef =>




Props 
- Props is properties which is used to send data from one component to another component in form of obj.
- This obj is immutable in child component. 
- Props are present in both class-based and function-based comp. 
- It is unidirectional
- React Props are read-only! You will get an error if you try to change their value.
- Default props=>

props vs States
- Props are immutable vs states are mutable.
- States are only comp level only but props are multiple components level. 
- If objects we want to send we have to wrap into curly braces
- We can send functions also in prop
- When we want to show that data from 

Default props => 
- We can pass some default value to props using Destructuring 
- For child component we can set some default value as props for ex.let child=({car="xyz"}).
- At any instance if parent component not sending car prop then default value xyz will taken

PropChildren=> What ever code you add inside jsx component call then it will not displayed it will stored in props children when we want to access  that then we need to display it like (props.children)


# Props drilling
- Sending a data through multiple nested components is props drilling A=>B=>C
- We must avoid prop drilling.Done using HOC Context API Redux/Redux Toolkit
- 

Conditional Rendering=>
- 

# Tailwind css
- 


# Events
- 


# React List


# React Form
+


Whenever we import json file then js engine will implicitly parse data into array



# Lifecycle methods (LM)=> Methods that tells about the lifecycle of any component. Categorized into 3 category (Mounting phase, Updating phase, Unmounting phase)
		- Defaulty available only in class-based components
		- Function Based components(FBC) doesn't provide.If we want to achieve LM  in FBC we can take help of hook such as useEffect hook
		- 3 Phases of lifecycle methods represents unique lifespan of component like 

1. Mounting Phase=> - Will represent how the component is created and how to render it on UI.
					//Constructor()=> - Will Execute first
									- Will Execute only once
									- Best place for initializing variables and states as it executes only once so that same state or variable will not get reinitialized again and again.
					//getDerivedStateFromProps()=> - Executes after constructor. This method is used to accept props from parent component and and we can write js logic inside getDerivedStateFromProps() (update state into child component).
					//render()=> - executes after getDerivedStateFromProps.
							   - Has return statement that returns jsx.
							   - Render method is used to display the content on UI.
							   
					//componentDidMount()=> - This method executes after render method
											- Once JSX is rendered React can perform the heavy computation/calculations or side-effects(async time taking part)
											- Multiple side effects are fetching, Network related operation.
											- if you are performing or handling side effects in componentDidMount after render method, render method can executes faster before this method which will help to enhance user exp.
											- Method will executes once.
											- In FBC, we can achieve this using UseEffect with simple empty dependencies . It will get execute once in entire lifecycle

2. Updating phase=> - Will start if user performs any actions(updation) ex.click hover form submit
					// getDerivedStateFromProps()=> Executes after constructor. This method is used to accept props from parent component and and we can write js logic inside getDerivedStateFromProps() (update state into child component).It will have Information about current state and prop-state. Will executes multiple times
					// shouldComponentUpdate()=> - method has informed about current state and previous state
												 - If there are any changes in current change or previous state it will return true or else false
												 - If method returns true then only next methods of updating phase will get executed.
					// getSnapshotBeforeUpdate()=> - this method will execute only if shouldComponent returns true
												   - This method stores the previous value of state with it and we can use it if required
					// render()=> - update state on  the UI
					// ComponentDidUpdate()=>//just async side-effects performed - This method will check the changes into state and based on that it will handle the side effects.Can execute multiple times.
					
3. Unmounting phase => - Has only one method that is ComponentWillUnmount()
					   - Returns function in which we can stop or clear ongoing task in current component
					   - Phase will occur if we/User navigates from one component to another component
					   - ComponentWillUnmount Method will be used to clear ongoing task into current component before navigating to another component. Ex. Set any interval into current component we can clear that interval in this method before we navigate to another component





 

//ContextApi=>steps


- Used to avoid props drilling.
- Here we have to create global context/store.It will store all the data that is required globally
- Data is provided by context that we created throughout the application.
- We have to use context api in 3 steps:
- create context , link context, provide context
- Creating a Context object
	import { createContext } from "react";
	const AppContext = createContext();

- Link context=> We want context to all the application for this we have to wrap app.jsx call in AppContext
	<AppContextProvider>
       <App/>
    </AppContextProvider>

- Provide context=> We will provide data to the props.children using contextObj.provider
	export const CountProvider = ({ children }) => {
		return (
			<CountContext.Provider value={{ count, incrementCount }}>
			{children} {/* Render whatever is passed inside */}
			</CountContext.Provider>
		);
	};
To use data provided into context we have to use hook called useContext. Use ContextHook will ask for an argument which should be context obj that is being exported from app context



//UUId creation 

#UseMemo=> 
- Used to achieve performance optimization in react application 
- UseMemo hook will return memoized value
- Syntax=> const memoizedVal=useMmo(callbackFunction,dependency array[])
- Your callback funct passed to useMemo hook if has any expensive/heavy computation. so it could affect entire application performance but as it is passed as use with UseMemoHook it wont get called on each component rerender.
  It will get called only when there are some changes in dependencies and it will return memoized value. 


#HigherOrderComponents => - Component that takes another comps an argument. example React.memo
						 - We can create our own HOC.Ex Loader


#Routers

JavaScript + React Important Questions
- let vsr const difference
- Functions ->types ,generator functions
- this keyword 
- objects
- Arrays- String
- Closures
- De-structuring 
- Promises 
- Async await
- Call apply bind 
- Hoisting
- 

//task=> form 


#Redux=> Steps
1. create slice obj first and store inside some keys 
	- name: name of slice,initialState:{},reducers:{functions}(reducer functions define)
	- For accessing key from slice export like this slice.action
2. Create store=> Configure store => configure what all functions needs to access 
3. Wrap app inside <provider> which has 1 arg store to attach store 
4. i.	To access states from redux use one hook useSelector which accepts callback function.
   ii.  To update inside states inside redux need to access reducer function from redux so we use useDispatch hook 


- React and features,advantages,disadvantages of react =>(Single page application and Declarative expected most)
- Library vs framework  with examples
- Virtual dom=> React will maintain 
- DIffing algo
- Virtual dom and React dom difference
- Reconciliation and fiber difference
- Folder structure and uses of each file=> (Node module, Scripts in package.json) 
- What are components and what is component based architecture.
- Types of components => class-based ,Function-based 
- What is Hooks
- What is Lifecycle methods.  
- Props 
- Main.jsx internals =. React dom, CreateRoot, render method
- Use of cdn links

