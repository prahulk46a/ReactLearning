// React prerequisites 
- HTML
- CSS
- Tailwind css
- JS=>
	- ES6
	- DOM
	- How JS engine works
	- Modules
	- Destructuring- rest& spread
	- Classes
	- Events, Timers
	- Objects, Arrays, String
	- map filter reduce

// History of React=> 
- Created by Facebook(Jordan Walke) in 2011
- Library
- Follows component based based. 
- Supports=> JavaScript,Typescript
- 2011-messenger implementation,2012 -Instagram, 2013- Open source


// React=> 
- JavaScript library which is used to create single page application.
- JSAP CSS animation library

//React features and characteristics=>
- It follows component based architecture
- It is declarative in nature(already declared). ex. we dont need to write/use dom.No need to write some logics. Cause already declared.React provides inbuilt hooks for different functionalities We just have to use them.
- Write once use anywhere. You can create functionality that are used multiple times. example. Create Button component once and use anywhere in application 




- (Imperative=> need to write logic)

// Library vs Framework
   	- Library => - Collection of reusable Block of code
		     - Light Weight
		     - Loosely typed.	
		     - Always particular functionality oriented
		     - Using Libraries we can create fast and scalable applications
		     - Easy to debug 
		     - Can install external libraries.
		   	
	- Framework=> - Collection of multiple libraries.
		      - Heavy Weight.
		      - Strictly typed compared with libraries
		      - Always multiple functionality oriented.
		      - Using Libraries we can crate applications but that maybe slower compared to libraries 
		      - Debugging is difficult task.	
		      - Can install external libraries.	


// Single page applications
- Application which doesn't required page reload to update content=> Single html file
- Faster than multipage application
- Ajax is hero of Single page application


// Ajax=> (Async JS and XML)=> 
- Ajax will send necessary requests to server so that bandwidth will be less hence request response cycle faster hence application will be faster 
- Ajax will load the content without reloading the page


// Package bundler=>
- Will bundle all the request into induvial bundles based on extensions 
- Package bundlers will help to reduce bandwidth
- If we are sending n no of request from frontend that multiple request are bundled into as minimum no request as possible based on extensions by package bundler
- Ex. Webpack, Rollup, Parcer 


// Installation
- Folder create 
- In that folder open cmd
- cmd command=> npm create vite
- Enter project name , package name(Default project name)
- Select framework
- Select language 
- Gives 3 command run one by one
- Default port => 5173

// Folder structure
- Node module=> All packages downloaded during react installation, needed for execution of react application ex. babel,eslint ,rollup, vite.js, react, react dom,   
- public=> Used to hold static assets in react similar to assets in src folder. Dont use mostly keep mostly in assets folder.
- src=> - Assets=> Static content stored in this folder mostly
		- 
- eslint.conflict.js=> It is the package which confirms syntax validation in building react application(analogous to java compiler)
- index.html=> Single html file. we do not add anything inside that.Inside that there is only single div with id root.
- package.json=>- It is like dashboard of entire react application where you get important limited info related to packages like version.^version => rangr upto cerain patches
				- devDependencies=> dependencies required only for development and not required after deployment.Majour dependencies like eslint,react,vite etc.
				- Script=> Inside package.jsom there is prop script this scripts are mapped with certain action.
						   for ex. in vite based project we use vite in create react app way we use npx so what this script will do,
						   it will get executed when added after npm run "scriptname" here dev to run project common script for all similar operations

- package-Lock.json=> Similar to like package.json. It will have exact version of dependencies download also that dependency is dependant on what that is present.
- vite.config.js=> Information about vite configuration.

// Code flow=>
Diffing algo=> Process to find different bet real dom and virtual dom
Reconciliation process=> Process of implementing the changes from virtual dom to real dom that are found during the diffing algo

// Vite- Organization which handles installation and organization of react project

- React fiber=> All changes in handle by react fiber it is analogous to js engine.
- What is Babel=> Babel is transpiler. It will convert the modern js(.JSX) code to browser understandable code(.js),this process is called transpilation.
- JSX=> Javascript xml => JSX is html look like js code.
- Transpilation occurs during the rendering

// Src=> 
- Each individuals reusable component is created inside your src folder as separate component
- main.jsx is only capable to communicate with your browser
- For main.jsx their is css file index.css
- Every components name should only Capital first

// Flow of React =>


// npm=> Node Package manager
- It is package manager which handles packages related to js framework and libraries
- Over 21 lakhs Packages
- In-order to download multiple packages => ex. npm install react babel react-dom.
- Node js will find package and downloads using npm cmds

//npm is node package manager but sometimes you want to directly execute some packages then npx(Node package executer) comes into picture

// Main.jsx=>
- Strict mode=> Checks js code double 
- Will contact mostly only with app.jsx

// createRoot(document.getElementById('root')).render(</App>)=> Analogous to div.append(app)
	- createRoot=>  - React creates a FiberRootNode that is linked to the DOM container (e.g., document.getElementById('root'))
					- This Fiber root serves as the entry point for all rendering work and keeps track of the state of the entire application.
					- <div id="root">//app</div> is entry point and all elements are then appended into this div
	
	- render(</App>)=> 	- Validate Input: React ensures the element (e.g., <App />) is a valid React element
					- The work is scheduled in a way that allows React to break it into chunks and prioritize tasks based on urgency
					- During ths render process diffing algo and transpilation happens
					- returned app </App> will be appended to div. 

- Styles applied to index.css  => will be applied to all as all component are in the end going to come at root div i.e


																 grandChild1
														child1<= grandChild2...
				returns main jsx				child jsx returned to ap
		Div-Root<= Main <= App+child1+child2...child n<= child2

														child n


- It is recommended to write into component but outside of that return statement
- jsx expressions=> Used to add js into html=> 
ex. let Footer=()=> {
		let a="Rahul";
    return (
      <div id="footer">
          My name is {a}
      </div>
    )
  } 
  
	//Old way to create=> https://react.dev/reference/react/createElement
	React.createElement(parent-tag,attributes,child-tag/content)=> React.createElement('div',{id:"myDiv",style:""},'<p>')
  	
	// JSX=> 
  - JavaScript and xml
  - Html look like structure but not html
  - While writing jsx we have to follow some rules=>
		- Rule1: Compulsory you have to return jsx cause in the end all is going to add into main html
		- Rule2: If you want to return single element send directly but if you want to return multiple elements then  you should wrap all into one parent element and send that one only.
		- Rule3: Each and every tag must be closed.
		- Rule4: We cannot use attributes like "class" "for", while writing the jsx instead of that we have to use "classname" and "htmlfor"
		- Rule5: React Fragments are empty angular braces.Avoiding creating extra nodes, it will improve performance.We cannot use key in empty angular braces butt we can use in <React.fragment> or <Fragment>. 
				Fragment is inside React library so need to import every time.
		- Rule6: JSX Expressions=> We can directly use strings no need of $ using {example}.
					Rules for JSX Expressions=>
						- We should not write console statement inside expressions. 
						- We Cannot write conditional statements in jsx expressions except ternary operators and short circuits.
						  Short circuit=> A && B => If first statement is true then only second statement will be checked.		 
										  A || B => If first statement is true then will not check next expression
						- We cannot use all looping statements in expression we can only use higher order functions which returns as we want to return changes on UI
		- Convention: return Statement should be on same line for multiple lines we prefer to use () 
		- In JSX expression we should not write object, array, null, undefined, boolean,BigInt.=> Strings and number only

States and State management => Redux is used to managing state

//Types of components- 
	- Function Based components

-a Class Based components(CBC)
	- Stateful components=> It has its own state it can be obj or null.
	- CBC is one of the traditional way of creating component in react
	- CBC will use class to create component

	Class Based Components (CBC)
	1. Will use classes for creating components.
	2. extends Component from react
	3. Has constructor and super call statement. 
	4. Must use render method.Inside that we return component.It will return and directly changes occurs in main 
	5. Stateful component=> It has inbuilt state and to handle this state we have setState method.
	6. We cannot use hooks in class based components.
	7. We have inbuilt life cycle methods in CBC. Ex constructor, render, getDerivedStateFromProps(), componentDidMount
	
 
	Function Based components (FBC)  //Shortcut=> rafce=> will give boilerplate
	1. Will use functions to creating components.
	2. Does not extend Component.
	3. Does not have constructor and  super call statement.
	4. Does not need render method.It will return jsx to caller or parent element.
	5. FBC are stateless component means that it will not have its own state and setState method.
	6. If we want to have state in function based component we have to use some extra hooks for ex. useState hook
	7. FBC does not have any inbuilt methods for managing life cycles so to achieve lifecycle method we have to use hook called as useEffect.

// Hot Module Replace=> 
	- One of the most useful feature offered by package bundlers.
	- It allows all kind of modules to be updated at runtime without need of full refresh
	- Not Intended to use in production used only in dev phase.
	- Ex. In html when we change any heading the data entered into input tag will vanished but in react if we update heading input fields data will remain as it is.


// Hooks
- This are inbuilt function/methods 
- Hooks names starts with use ex. useState, useEffect, useContext, useCallback, useReducer ,useMemo.
- We can create any function and will name it use(XYZ) such functions can be treated as custom hooks.Ex. useAdd

1. useState=>
array of 2
destructure to access
first is state and second is func setState 
pass value in parameter
when you change state your entire component will get loaded by Default means every line will gel executed again
present into react library so need to import every time when we want to use.
if you want recheck entire component then useState is used. when cart is changed price associated should also changed using static variables this is not possible
This is asynchronous in nature

Props 
- Props is properties which is used to send data from one component to another component in form of obj.
- This obj is immutable in child component. 
- Props are present in both class-based and function-based comp. 
- It is unidirectional
- React Props are read-only! You will get an error if you try to change their value.
- Default props=>

props vs States
- Props are immutable vs states are mutable.
- States are only comp level only but props are multiple components level. 
- If objects we want to send we have to wrap into curly braces
- We can send functions also in prop
- When we want to show that data from 

Default props => 
- We can pass some default value to props using Destructuring 
- For child component we can set some default value as props for ex.let child=({car="xyz"}).
- At any instance if parent component not sending car prop then default value xyz will taken

PropChildren=> What ever code you add inside jsx component call then it will not displayed it will stored in props children when we want to access  that then we need to display it like (props.children)

Conditional Rendering=>
- 


JavaScript + React Important Questions
- let vsr const difference
- Functions ->types ,generator functions
- this keyword 
- objects
- Arrays- String
- Closures
- De-structuring 
- Promises 
- Async await
- Call apply bind 
- Hoisting
- 







- React and features,advantages,disadvantages of react =>(Single page application and Declarative expected most)
- Library vs framework  with examples
- Virtual dom=> React will maintain 
- DIffing algo
- Virtual dom and React dom difference
- Reconciliation and fiber difference
- Folder structure and uses of each file=> (Node module, Scripts in package.json) 
- What are components and what is component based architecture.
- Types of components => class-based ,Function-based 
- What is Hooks
- What is Lifecycle methods.  
- Props 
- Main.jsx internals =. React dom, CreateRoot, render method
- Use of cdn links


# Props drilling
- Sending a data through multiple nested components is props drilling A=>B=>C
- We must avoid prop drilling.Done using HOC Context API Redux/Redux Toolkit
- 


# Tailwind css
- 


# Events
- 